// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  name        String
  email       String          @unique
  password    String
  tasks       Task[]          @relation("OwnerTasks")
  sharedTasks SharedTask[]
  sharedItems SharedTaskItem[]
}

model Task {
  id         Int          @id @default(autoincrement())
  name       String
  userId     Int
  owner      User         @relation("OwnerTasks", fields: [userId], references: [id])
  sharedWith SharedTask[]
  items      TaskItem[]
}

model SharedTask {
  id     Int  @id @default(autoincrement())
  taskId Int
  userId Int
  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model TaskItem {
  id              Int              @id @default(autoincrement())
  taskId          Int
  content        String
  task           Task              @relation(fields: [taskId], references: [id])
  sharedTaskItems SharedTaskItem[]
}

model SharedTaskItem {
  id         Int       @id @default(autoincrement())
  taskItemId Int
  sharedWith Int       // Usuario con quien se comparte el item
  accepted   Boolean   @default(false) // Indica si el usuario acept√≥ el item
  taskItem   TaskItem  @relation(fields: [taskItemId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [sharedWith], references: [id], onDelete: Cascade)
}